const VERTICES: &[Vertex] = &[
    //bottom
    Vertex::new(1.0, 1.0, 0.0, 1.0, 1.0),
    Vertex::new(1.0, 0.0, 0.0, 1.0, 0.0),
    Vertex::new(0.0, 0.0, 0.0, 0.0, 0.0),
    Vertex::new(0.0, 0.0, 0.0, 0.0, 0.0),
    Vertex::new(0.0, 1.0, 0.0, 0.0, 1.0),
    Vertex::new(1.0, 1.0, 0.0, 1.0, 1.0),
    //top
    Vertex::new(0.0, 0.0, 1.0, 0.0, 0.0),
    Vertex::new(1.0, 0.0, 1.0, 1.0, 0.0),
    Vertex::new(1.0, 1.0, 1.0, 1.0, 1.0),
    Vertex::new(1.0, 1.0, 1.0, 1.0, 1.0),
    Vertex::new(0.0, 1.0, 1.0, 0.0, 1.0),
    Vertex::new(0.0, 0.0, 1.0, 0.0, 0.0),
    //north negative x
    Vertex::new(0.0, 1.0, 1.0, 1.0, 0.0),
    Vertex::new(0.0, 1.0, 0.0, 1.0, 1.0),
    Vertex::new(0.0, 0.0, 0.0, 0.0, 1.0),
    Vertex::new(0.0, 0.0, 0.0, 0.0, 1.0),
    Vertex::new(0.0, 0.0, 1.0, 0.0, 0.0),
    Vertex::new(0.0, 1.0, 1.0, 1.0, 0.0),
    //south positive x
    Vertex::new(1.0, 0.0, 0.0, 0.0, 1.0),
    Vertex::new(1.0, 1.0, 0.0, 1.0, 1.0),
    Vertex::new(1.0, 1.0, 1.0, 1.0, 0.0),
    Vertex::new(1.0, 1.0, 1.0, 1.0, 0.0),
    Vertex::new(1.0, 0.0, 1.0, 0.0, 0.0),
    Vertex::new(1.0, 0.0, 0.0, 0.0, 1.0),
    //west negative z
    Vertex::new(0.0, 0.0, 0.0, 0.0, 1.0),
    Vertex::new(1.0, 0.0, 0.0, 1.0, 1.0),
    Vertex::new(1.0, 0.0, 1.0, 1.0, 0.0),
    Vertex::new(1.0, 0.0, 1.0, 1.0, 0.0),
    Vertex::new(0.0, 0.0, 1.0, 0.0, 0.0),
    Vertex::new(0.0, 0.0, 0.0, 0.0, 1.0),
    //east positive z
    Vertex::new(1.0, 1.0, 1.0, 1.0, 0.0),
    Vertex::new(1.0, 1.0, 0.0, 1.0, 1.0),
    Vertex::new(0.0, 1.0, 0.0, 0.0, 1.0),
    Vertex::new(0.0, 1.0, 0.0, 0.0, 1.0),
    Vertex::new(0.0, 1.0, 1.0, 0.0, 0.0),
    Vertex::new(1.0, 1.0, 1.0, 1.0, 0.0),
];

    #[allow(dead_code)]
    pub fn set_mesh(&mut self, blocks: &Vec<Block>, device: &dyn DeviceExt) {
        let mut vertices: Vec<Vertex> = Vec::new();
        if self.solid {
            if get_block(&blocks, device, self.pos[0], self.pos[1], self.pos[2] - 1).is_none() {
                add_vertice(&mut vertices, VERTICES[0]);
                add_vertice(&mut vertices, VERTICES[1]);
                add_vertice(&mut vertices, VERTICES[2]);
                add_vertice(&mut vertices, VERTICES[3]);
                add_vertice(&mut vertices, VERTICES[4]);
                add_vertice(&mut vertices, VERTICES[5]);
            } else if !get_block(&blocks, device, self.pos[0], self.pos[1], self.pos[2] - 1)
                .unwrap()
                .solid
            {
                add_vertice(&mut vertices, VERTICES[0]);
                add_vertice(&mut vertices, VERTICES[1]);
                add_vertice(&mut vertices, VERTICES[2]);
                add_vertice(&mut vertices, VERTICES[3]);
                add_vertice(&mut vertices, VERTICES[4]);
                add_vertice(&mut vertices, VERTICES[5]);
            }
            if get_block(&blocks, device, self.pos[0], self.pos[1], self.pos[2] + 1).is_none() {
                add_vertice(&mut vertices, VERTICES[6]);
                add_vertice(&mut vertices, VERTICES[7]);
                add_vertice(&mut vertices, VERTICES[8]);
                add_vertice(&mut vertices, VERTICES[9]);
                add_vertice(&mut vertices, VERTICES[10]);
                add_vertice(&mut vertices, VERTICES[11]);
            } else if !get_block(&blocks, device, self.pos[0], self.pos[1], self.pos[2] + 1)
                .unwrap()
                .solid
            {
                add_vertice(&mut vertices, VERTICES[6]);
                add_vertice(&mut vertices, VERTICES[7]);
                add_vertice(&mut vertices, VERTICES[8]);
                add_vertice(&mut vertices, VERTICES[9]);
                add_vertice(&mut vertices, VERTICES[10]);
                add_vertice(&mut vertices, VERTICES[11]);
            }
            if get_block(&blocks, device, self.pos[0] - 1, self.pos[1], self.pos[2]).is_none() {
                add_vertice(&mut vertices, VERTICES[12]);
                add_vertice(&mut vertices, VERTICES[13]);
                add_vertice(&mut vertices, VERTICES[14]);
                add_vertice(&mut vertices, VERTICES[15]);
                add_vertice(&mut vertices, VERTICES[16]);
                add_vertice(&mut vertices, VERTICES[17]);
            } else if !get_block(&blocks, device, self.pos[0] - 1, self.pos[1], self.pos[2])
                .unwrap()
                .solid
            {
                add_vertice(&mut vertices, VERTICES[12]);
                add_vertice(&mut vertices, VERTICES[13]);
                add_vertice(&mut vertices, VERTICES[14]);
                add_vertice(&mut vertices, VERTICES[15]);
                add_vertice(&mut vertices, VERTICES[16]);
                add_vertice(&mut vertices, VERTICES[17]);
            }
            if get_block(&blocks, device, self.pos[0] + 1, self.pos[1], self.pos[2]).is_none() {
                add_vertice(&mut vertices, VERTICES[18]);
                add_vertice(&mut vertices, VERTICES[19]);
                add_vertice(&mut vertices, VERTICES[20]);
                add_vertice(&mut vertices, VERTICES[21]);
                add_vertice(&mut vertices, VERTICES[22]);
                add_vertice(&mut vertices, VERTICES[23]);
            } else if !get_block(&blocks, device, self.pos[0] + 1, self.pos[1], self.pos[2])
                .unwrap()
                .solid
            {
                add_vertice(&mut vertices, VERTICES[18]);
                add_vertice(&mut vertices, VERTICES[19]);
                add_vertice(&mut vertices, VERTICES[20]);
                add_vertice(&mut vertices, VERTICES[21]);
                add_vertice(&mut vertices, VERTICES[22]);
                add_vertice(&mut vertices, VERTICES[23]);
            }
            if get_block(&blocks, device, self.pos[0], self.pos[1] - 1, self.pos[2]).is_none() {
                add_vertice(&mut vertices, VERTICES[24]);
                add_vertice(&mut vertices, VERTICES[25]);
                add_vertice(&mut vertices, VERTICES[26]);
                add_vertice(&mut vertices, VERTICES[27]);
                add_vertice(&mut vertices, VERTICES[28]);
                add_vertice(&mut vertices, VERTICES[29]);
            } else if !get_block(&blocks, device, self.pos[0], self.pos[1] - 1, self.pos[2])
                .unwrap()
                .solid
            {
                add_vertice(&mut vertices, VERTICES[24]);
                add_vertice(&mut vertices, VERTICES[25]);
                add_vertice(&mut vertices, VERTICES[26]);
                add_vertice(&mut vertices, VERTICES[27]);
                add_vertice(&mut vertices, VERTICES[28]);
                add_vertice(&mut vertices, VERTICES[29]);
            }
            if get_block(&blocks, device, self.pos[0], self.pos[1] + 1, self.pos[2]).is_none() {
                add_vertice(&mut vertices, VERTICES[30]);
                add_vertice(&mut vertices, VERTICES[31]);
                add_vertice(&mut vertices, VERTICES[32]);
                add_vertice(&mut vertices, VERTICES[33]);
                add_vertice(&mut vertices, VERTICES[34]);
                add_vertice(&mut vertices, VERTICES[35]);
            } else if !get_block(&blocks, device, self.pos[0], self.pos[1] + 1, self.pos[2])
                .unwrap()
                .solid
            {
                add_vertice(&mut vertices, VERTICES[30]);
                add_vertice(&mut vertices, VERTICES[31]);
                add_vertice(&mut vertices, VERTICES[32]);
                add_vertice(&mut vertices, VERTICES[33]);
                add_vertice(&mut vertices, VERTICES[34]);
                add_vertice(&mut vertices, VERTICES[35]);
            }
        }
        self.model = model::Model::new(&vertices, &[], device);
    }

    

pub fn smoothstep(edge0: f32, edge1: f32, x: f32) -> f32 {
   if x < edge0 {
      return 0.0;
    }

   if x >= edge1 {
      return 1.0;
   }

   // Scale/bias into [0..1] range
   let x = (x - edge0) / (edge1 - edge0);

   x * x * (3.0 - 2.0 * x)
}

FROM BLOCK
pub fn get_block(
    blocks: &Vec<Block>,
    device: &dyn DeviceExt,
    x: i32,
    y: i32,
    z: i32,
) -> Option<Block> {
    let i = ((x * WORLD_SIZE * WORLD_SIZE) + (y * WORLD_SIZE) + z) as usize;
    if x < WORLD_SIZE && x > -1 && y < WORLD_SIZE && y > -1 && z < WORLD_SIZE && z > -1 {
        let new_block = Block::new(false, blocks[i].pos, blocks[i].solid, device);
        return Some(new_block);
    }
    None
}
